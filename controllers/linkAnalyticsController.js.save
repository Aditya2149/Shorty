const pool = require('../database');  


// Middleware to fetch linkId from shortcode
const getLinkIdByShortcode = async (req, res, next) => {
    const { shortcode } = req.query;

    try {
        const result = await pool.query('SELECT id FROM links WHERE shortcode = $1', [shortcode]);

        if (result.rows.length > 0) {
            req.linkId = result.rows[0].id; // Attach linkId to the request object
            next(); // Proceed to the next handler
        } else {
            res.status(404).json({ message: 'Shortcode not found' });
        }
    } catch (error) {
        console.error('Error fetching link ID:', error.message);
        res.status(500).json({ message: 'Server error' });
    }
};

// Use this middleware for analytics routes
router.get('/analytics/clicks', getLinkIdByShortcode, (req, res) => {
    const { linkId } = req;
    const dataGranularity = req.query.granularity;

    if (dataGranularity === 'day') {
        getClicksByDay(req, res);
    } else if (dataGranularity === 'week') {
        getClicksByWeek(req, res);
    } else if (dataGranularity === 'hour') {
        getClicksByHour(req, res);
    } else {
        res.status(400).json({ message: 'Invalid data granularity' });
    }
});


const getClicksByHour = async (req, res) => {
    const { linkId } = req.params;
    
    const query = `
        SELECT COUNT(*), DATE_TRUNC('hour', created_at) AS hour
        FROM link_analytics
        WHERE link_id = $1
        GROUP BY DATE_TRUNC('hour', created_at)
        ORDER BY hour
    `;

    try {
        const result = await pool.query(query, [linkId]);
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching click data:', error.message);
        res.status(500).json({ message: 'Server error' });
    }
};

const getClicksByDay = async (req, res) => {
    const { linkId } = req.params;

    const query = `
        SELECT COUNT(*), DATE(created_at) AS day
        FROM link_analytics
        WHERE link_id = $1
        GROUP BY DATE(created_at)
    `;

    try {
        const result = await pool.query(query, [linkId]);
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching click data:', error.message);
        res.status(500).json({ message: 'Server error' });
    }
};

const getClicksByWeek = async (req, res) => {
    const { linkId } = req.params;

    const query = `
        SELECT COUNT(*), DATE_TRUNC('week', created_at) AS week
        FROM link_analytics
        WHERE link_id = $1
        GROUP BY DATE_TRUNC('week', created_at)
    `;

    try {
        const result = await pool.query(query, [linkId]);
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching click data:', error.message);
        res.status(500).json({ message: 'Server error' });
    }
};

const getClicksByGeography = async (req, res) => {
    const { linkId } = req.params;

    const query = `
        SELECT COUNT(*), country, state, ip_address
        FROM link_analytics
        WHERE link_id = $1
        GROUP BY country, state, ip_address
    `;

    try {
        const result = await pool.query(query, [linkId]);
        res.json(result.rows);
    } catch (error) {
        console.error('Error fetching geographic data:', error.message);
        res.status(500).json({ message: 'Server error' });
    }
};

module.exports = { getClicksByDay, getClicksByWeek, getClicksByGeography, getClicksByHour, getLinkIdByShortcode, };
